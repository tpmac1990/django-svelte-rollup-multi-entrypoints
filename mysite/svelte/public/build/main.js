
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, h as handle_promise, s as safe_not_equal, e as element, t as text, a as space, b as attr_dev, c as add_location, f as insert_dev, g as append_dev, j as set_data_dev, k as transition_in, l as transition_out, m as detach_dev, v as validate_slots, n as noop, o as create_component, p as mount_component, q as destroy_component } from './index.js';

/* mysite/polls/src/App.svelte generated by Svelte v3.49.0 */

const file = "mysite/polls/src/App.svelte";

// (1:0) <script>  // non-dynamic import of nested component  // import Nested from './Nested.svelte';  export let name; </script>  <main>  <h1>Hello Ma DA {name}
function create_catch_block(ctx) {
	const block = {
		c: noop,
		m: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(1:0) <script>  // non-dynamic import of nested component  // import Nested from './Nested.svelte';  export let name; </script>  <main>  <h1>Hello Ma DA {name}",
		ctx
	});

	return block;
}

// (11:47)    <Module.default />  {/await}
function create_then_block(ctx) {
	let module_default;
	let current;
	module_default = new /*Module*/ ctx[1].default({ $$inline: true });

	const block = {
		c: function create() {
			create_component(module_default.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(module_default, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(module_default.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(module_default.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(module_default, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(11:47)    <Module.default />  {/await}",
		ctx
	});

	return block;
}

// (1:0) <script>  // non-dynamic import of nested component  // import Nested from './Nested.svelte';  export let name; </script>  <main>  <h1>Hello Ma DA {name}
function create_pending_block(ctx) {
	const block = {
		c: noop,
		m: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(1:0) <script>  // non-dynamic import of nested component  // import Nested from './Nested.svelte';  export let name; </script>  <main>  <h1>Hello Ma DA {name}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let main;
	let h1;
	let t0;
	let t1;
	let t2;
	let t3;
	let p;
	let t4;
	let a;
	let t6;
	let t7;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 1,
		blocks: [,,,]
	};

	handle_promise(import('./Nested.js'), info);

	const block = {
		c: function create() {
			main = element("main");
			h1 = element("h1");
			t0 = text("Hello Ma DA ");
			t1 = text(/*name*/ ctx[0]);
			t2 = text("!");
			t3 = space();
			p = element("p");
			t4 = text("Visit the ");
			a = element("a");
			a.textContent = "Svelte tutorial";
			t6 = text(" to learn how to build Svelte apps.");
			t7 = space();
			info.block.c();
			attr_dev(h1, "class", "svelte-1tky8bj");
			add_location(h1, file, 7, 1, 131);
			attr_dev(a, "href", "https://svelte.dev/tutorial");
			add_location(a, file, 8, 14, 174);
			add_location(p, file, 8, 1, 161);
			attr_dev(main, "class", "svelte-1tky8bj");
			add_location(main, file, 6, 0, 123);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, h1);
			append_dev(h1, t0);
			append_dev(h1, t1);
			append_dev(h1, t2);
			append_dev(main, t3);
			append_dev(main, p);
			append_dev(p, t4);
			append_dev(p, a);
			append_dev(p, t6);
			append_dev(main, t7);
			info.block.m(main, info.anchor = null);
			info.mount = () => main;
			info.anchor = null;
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			if (!current || dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			info.block.d();
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	let { name } = $$props;
	const writable_props = ['name'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	$$self.$capture_state = () => ({ name });

	$$self.$inject_state = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
			console.warn("<App> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const app = new App({
	target: document.body,
	props: {
		name: 'world'
	}
});

export { app as default };
