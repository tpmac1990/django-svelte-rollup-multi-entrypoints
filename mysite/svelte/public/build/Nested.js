
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, c as add_location, f as insert_dev, g as append_dev, n as noop, m as detach_dev } from './index.js';

/* mysite/polls/src/Nested.svelte generated by Svelte v3.49.0 */

const file = "mysite/polls/src/Nested.svelte";

function create_fragment(ctx) {
	let main;
	let p;

	const block = {
		c: function create() {
			main = element("main");
			p = element("p");
			p.textContent = `my actual name is ${/*name*/ ctx[0]} and my age is ${/*age*/ ctx[1]}, i am young`;
			add_location(p, file, 6, 1, 65);
			add_location(main, file, 5, 0, 57);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, p);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Nested', slots, []);
	let name = 'Terry';
	let age = '22';
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Nested> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ name, age });

	$$self.$inject_state = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
		if ('age' in $$props) $$invalidate(1, age = $$props.age);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, age];
}

class Nested extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Nested",
			options,
			id: create_fragment.name
		});
	}
}

export { Nested as default };
